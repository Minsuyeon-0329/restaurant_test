name: Upload Release Asset
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Set up
        uses: fwilhe2/setup-kotlin@main
      - name: Compile
        run: kotlinc main.kt -include-runtime -d /tmp/hello.jar
      - name: Run test
        run: java -jar /tmp/hello.jar   
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          # Artifact name
          name: Build Artifact
          path: /tmp/hello.jar
          # The desired behavior if no files are found using the provided path.
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip --junk-paths my-artifact README.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://github.com/Minsuyeon-0329/restaurant_test.git # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /tmp/hello.jar
          asset_name: hello.jar
          asset_content_type: application/zip
          
